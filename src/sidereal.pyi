from __future__ import annotations
import numpy
import typing

__all__ = [
    "DateTime",
    "DateTimeArray",
    "TimeDelta",
    "arange",
    "days",
    "hours",
    "jd_to_datetime",
    "linspace",
    "minutes",
    "months",
    "nanoseconds",
    "now",
    "seconds",
    "years",
]

class DateTime:
    day: int
    gast: float
    gmst: float
    hour: int
    jd_tai: float
    jd_tt: float
    jd_ut1: float
    jd_utc: float
    minute: int
    mjd_tai: float
    mjd_tt: float
    mjd_ut1: float
    mjd_utc: float
    month: int
    nanosecond: int
    px: float
    py: float
    second: int
    year: int
    def __add__(self, arg0: TimeDelta) -> DateTime: ...
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int = 0,
        minute: int = 0,
        second: int = 0,
        nanosecond: int = 0,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    @typing.overload
    def __sub__(self, arg0: DateTime) -> TimeDelta: ...
    @typing.overload
    def __sub__(self, arg0: TimeDelta) -> DateTime: ...
    def gtod_to_itrf(self) -> numpy.ndarray: ...
    def itrf_to_j2000(self) -> numpy.ndarray: ...
    def j2000_to_mod(self) -> numpy.ndarray: ...
    def mod_to_tod(self) -> numpy.ndarray: ...
    def teme_to_gtod(self) -> numpy.ndarray: ...
    def tod_to_teme(self) -> numpy.ndarray: ...

class DateTimeArray:
    def __getitem__(self, arg0: int) -> DateTime: ...
    def __init__(self, arg0: list[DateTime]) -> None: ...
    def __len__(self) -> int: ...
    def gast(self) -> list[float]: ...
    def gmst(self) -> list[float]: ...
    def gtod_to_itrf(self) -> list[numpy.ndarray]: ...
    def itrf_to_j2000(self) -> list[numpy.ndarray]: ...
    def j2000_to_mod(self) -> list[numpy.ndarray]: ...
    def jd_tai(self) -> list[float]: ...
    def jd_tt(self) -> list[float]: ...
    def jd_ut1(self) -> list[float]: ...
    def jd_utc(self) -> list[float]: ...
    def mjd_tai(self) -> list[float]: ...
    def mjd_tt(self) -> list[float]: ...
    def mjd_ut1(self) -> list[float]: ...
    def mjd_utc(self) -> list[float]: ...
    def mod_to_tod(self) -> list[numpy.ndarray]: ...
    def px(self) -> list[float]: ...
    def py(self) -> list[float]: ...
    def tai_minus_utc(self) -> list[float]: ...
    def teme_to_gtod(self) -> list[numpy.ndarray]: ...
    def tod_to_teme(self) -> list[numpy.ndarray]: ...
    def ut1_minus_utc(self) -> list[float]: ...

class TimeDelta:
    days: int
    hours: int
    minutes: int
    months: int
    nanoseconds: int
    seconds: int
    years: int
    def __init__(
        self,
        years: int = 0,
        months: int = 0,
        days: int = 0,
        hours: int = 0,
        minutes: int = 0,
        seconds: int = 0,
        nanoseconds: int = 0,
    ) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def total_seconds(self) -> float: ...

def arange(arg0: DateTime, arg1: DateTime, arg2: TimeDelta) -> DateTimeArray:
    """
    Generate DateTime objects between two specified DateTime points with a specified step size.

    :param dt1: The first DateTime
    :param dt2: The second DateTime
    :param step: The step size
    :return: A vector of DateTime objects
    """

def days(arg0: int) -> TimeDelta: ...
def hours(arg0: int) -> TimeDelta: ...
def jd_to_datetime(arg0: float) -> DateTime:
    """
    Convert a Julian Date to a DateTime object.
    """

def linspace(arg0: DateTime, arg1: DateTime, arg2: int) -> DateTimeArray:
    """
    Generate n evenly spaced DateTime objects between two specified DateTime points

    :param dt1: The first DateTime
    :param dt2: The second DateTime
    :param n: The number of DateTime objects to generate
    :return: A vector of DateTime objects
    """

def minutes(arg0: int) -> TimeDelta: ...
def months(arg0: int) -> TimeDelta: ...
def nanoseconds(arg0: int) -> TimeDelta: ...
def now() -> DateTime:
    """
    Get the current DateTime.
    """

def seconds(arg0: int) -> TimeDelta: ...
def years(arg0: int) -> TimeDelta: ...
